import {
  degreesToRadians,
  es_default,
  getCoord,
  getGeom,
  lengthToRadians,
  point,
  radiansToDegrees
} from "./chunk-PFHUW4EO.js";
import "./chunk-JVWSFFO4.js";

// node_modules/@turf/bearing/dist/es/index.js
function bearing(start, end, options) {
  if (options === void 0) {
    options = {};
  }
  if (options.final === true) {
    return calculateFinalBearing(start, end);
  }
  var coordinates1 = getCoord(start);
  var coordinates2 = getCoord(end);
  var lon1 = degreesToRadians(coordinates1[0]);
  var lon2 = degreesToRadians(coordinates2[0]);
  var lat1 = degreesToRadians(coordinates1[1]);
  var lat2 = degreesToRadians(coordinates2[1]);
  var a = Math.sin(lon2 - lon1) * Math.cos(lat2);
  var b = Math.cos(lat1) * Math.sin(lat2) - Math.sin(lat1) * Math.cos(lat2) * Math.cos(lon2 - lon1);
  return radiansToDegrees(Math.atan2(a, b));
}
function calculateFinalBearing(start, end) {
  var bear = bearing(end, start);
  bear = (bear + 180) % 360;
  return bear;
}

// node_modules/@turf/destination/dist/es/index.js
function destination(origin, distance, bearing2, options) {
  if (options === void 0) {
    options = {};
  }
  var coordinates1 = getCoord(origin);
  var longitude1 = degreesToRadians(coordinates1[0]);
  var latitude1 = degreesToRadians(coordinates1[1]);
  var bearingRad = degreesToRadians(bearing2);
  var radians = lengthToRadians(distance, options.units);
  var latitude2 = Math.asin(Math.sin(latitude1) * Math.cos(radians) + Math.cos(latitude1) * Math.sin(radians) * Math.cos(bearingRad));
  var longitude2 = longitude1 + Math.atan2(Math.sin(bearingRad) * Math.sin(radians) * Math.cos(latitude1), Math.cos(radians) - Math.sin(latitude1) * Math.sin(latitude2));
  var lng = radiansToDegrees(longitude2);
  var lat = radiansToDegrees(latitude2);
  return point([lng, lat], options.properties);
}

// node_modules/@turf/along/dist/es/index.js
function along(line, distance, options) {
  if (options === void 0) {
    options = {};
  }
  var geom = getGeom(line);
  var coords = geom.coordinates;
  var travelled = 0;
  for (var i = 0; i < coords.length; i++) {
    if (distance >= travelled && i === coords.length - 1) {
      break;
    } else if (travelled >= distance) {
      var overshot = distance - travelled;
      if (!overshot) {
        return point(coords[i]);
      } else {
        var direction = bearing(coords[i], coords[i - 1]) - 180;
        var interpolated = destination(coords[i], overshot, direction, options);
        return interpolated;
      }
    } else {
      travelled += es_default(coords[i], coords[i + 1], options);
    }
  }
  return point(coords[coords.length - 1]);
}
export {
  along as default
};
//# sourceMappingURL=@turf_along.js.map
